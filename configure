#!/usr/bin/python

srcs = [
        'disk', 'disk_mgr', 'disk_scanner', 'latency', 'main', 'sg', 'sha1', 'system_id', 'web_app', 'src/protocol.pb-c', 'monoclock'
]

test_srcs = {
        'disk_mgr': ('disk_mgr', '../src/protocol.pb-c'),
}

cflags = ['-I.', '-I../libscsicmd/include', '-Ilibwire/include', '-g', '-O0', '-Wall', '-Werror', '-D_GNU_SOURCE']
ldflags = [ '-L../libscsicmd', '-lscsicmd', '-lprotobuf-c', '-lpthread' ]

import os, os.path
import ninja_syntax

n = ninja_syntax.Writer(file('build.ninja', 'w'))
n.comment('Auto generated by ./configure, edit the configure script instead')
n.newline()

def shell_escape(str):
        """Escape str such that it's interpreted as a single argument by
           the shell."""
        # This isn't complete, but it's just enough to make NINJA_PYTHON work.
        if '"' in str:
                return "'%s'" % str.replace("'", "\\'")
        return str


n.variable('cflags', ' '.join(shell_escape(flag) for flag in cflags))
n.variable('ldflags', ' '.join(shell_escape(flag) for flag in ldflags))
n.newline()

n.rule('c',
        command='gcc -MMD -MT $out -MF $out.d $cflags -c $in -o $out',
        depfile='$out.d',
        deps='gcc',
        description='CC $out'
)
n.newline()

n.rule('ar',
        command='rm -f $out && ar crs $out $in',
        description='AR $out',
)
n.newline()

n.rule('link',
        command='gcc -o $out $in $libs $ldflags',
        description='LINK $out'
)
n.newline()

n.rule('concat',
        command='cat $in > $out',
        description='CONCAT $out')
n.newline()

def src(filename):
        return os.path.join('src', filename)
def btest(filename):
        return os.path.join('test', filename)
def built(filename):
        return os.path.join('built', filename)
def cc(filename, src, **kwargs):
        return n.build(built(filename) + '.o', 'c', src(filename) + '.c', **kwargs)

all_targets = []

def all_files(d):
    out = []
    for root, dirs, files in os.walk(d):
        out += [os.path.join(root, name) for name in files if name.endswith('.c') or name.endswith('.h') or name == 'Makefile']
    return out

n.build('src/web_app.c', 'concat', ['web/app.inc', 'src/web.c'])

lib = ['libwire.a']

objs = []
for source in srcs:
        objs += cc(source, src)
disksurvey = n.build('disksurvey', 'link', objs, implicit=lib, variables=[('libs', lib)])
all_targets += disksurvey
n.newline()

n.rule('struct_to_h',
        command='src/struct_to_h.py $in > $out',
        description='STRUCT_T_H $out')
n.build('src/disk_def.h', 'struct_to_h', 'src/disk.yaml', implicit=['src/struct_to_h.py'])
n.newline()

n.rule('protoc',
        command='protoc-c --c_out=src $in',
        description='PROTOC $out')
n.build('src/protocol.pb-c.c', 'protoc', 'src/protocol.proto')

n.build('web/app.css', 'concat', ['web/disksurvey.css', 'web/backgrid.css', 'web/backgrid-paginator.css'])
n.build('web/app.js', 'concat', ['web/' + name for name in ['jquery.js', 'underscore.js', 'backbone.js', 'handlebars.js', 'backgrid.js', 'backgrid-paginator.js', 'jquery.sparkline.js', 'coffee.js']])

n.rule('coffee',
        command='coffee -p $in > $out',
        description='COFFEE $out')
n.build('web/coffee.js', 'coffee', 'web/coffee.coffee')

n.rule('app_inc',
        command='web/app_inc.sh web/app.css web/app.js web/index.html > $out',
        description='APP_INC $out')
n.build('web/app.inc', 'app_inc', implicit=['web/app_inc.sh', 'web/app.css', 'web/app.js', 'web/index.html'])

#test_exec = []
#for test in test_srcs.keys():
#        objs = []
#        for source in test_srcs[test]:
#                objs += cc(source, btest)
#        test_exec += n.build(test, 'link', objs, implicit=lib, variables=[('libs', lib)])
#        all_targets += test_exec
#n.newline()

n.rule('configure',
        command='./configure',
        description='CONFIGURE build.ninja',
        generator=True
        )
all_targets += n.build('build.ninja', 'configure', implicit='./configure')
n.newline()

#n.rule('libwire_configure',
#        command='cd libwire && ./configure',
#        description='CONFIGURE libwire build.ninja',
#        generator=True
#        )
#n.build('libwire/build.ninja', 'libwire_configure', implicit='libwire/configure')
n.subninja('build.ninja.libwire')
n.newline()

n.rule('tags',
        command='ctags $in',
        description='CTAGS $out'
        )
all_targets += n.build('tags', 'tags', [src(name) + '.c' for name in srcs])
n.newline()

n.build('all', 'phony', all_targets)
n.default('all')
